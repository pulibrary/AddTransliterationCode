'MacroName:AddCode
'MacroDescription:Add transliteration codes in subfield 7
'Macro written by: Thomas Ventimiglia, Princeton University East Asian Library 
'Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
'You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
'Macro Created: 30 September 2025
'Macro last modified: 30 September 2025
'Macro version: 0.1.0

Global Const RowHeight = 20
Global Const ColumnWidth = 50   
Global Const MarginSize = 10
Global sCurrProv 

Declare Function Row(iPos As Integer) As Integer
Declare Function Column(iPos As Integer) As Integer
Declare Function ControlWidth(iPos As Integer) As Integer
Declare Function ControlHeight(iPos As Integer) As Integer
Declare Function DialogFunc%(DlgItem$, Action%, SuppValue&)
Declare Sub PopulateProvenanceTable(ByRef aProvenanceTable$())
Declare Sub GetProvenanceList(ByRef aProvenanceTable$(), ByRef aProvenance$())
Declare Function ReplaceAll(sStr As String, sFind As String, sReplace As String) As String


Sub Main
   Dim CS As Object
On Error Resume Next
   Set CS = GetObject(,"Connex.Client")
On Error GoTo 0
   If CS Is Nothing Then
      Set CS = CreateObject("Connex.Client")
   End If

   sCurrProv = ""

   Dim aProvenanceTable$()
   Dim aProvenance$()
   Call PopulateProvenanceTable(aProvenanceTable$)
   Call GetProvenanceList(aProvenanceTable$,aProvenance$)

   Begin Dialog CodeBuilder Column(7), Row(5),"Build Transliteration Code",.DialogFunc
      'Button Column(1), Row(1), ControlWidth(2), ControlHeight(1), "Add New subfield 7", .NewSubfield
      
      Text Column(1), Row(1), ControlWidth(1), ControlHeight(1), "Provenance:"
      DropListBox Column(2), Row(1), ControlWidth(3), ControlHeight(UBound(aProvenance$)),aProvenance$(),.ProvenanceCombo
      Button Column(5), Row(1), ControlWidth(2), ControlHeight(1),"Add Provenance",.AddProvenance
      
      Text Column(1), Row(2), ControlWidth(1), ControlHeight(1), "Value:"
      TextBox Column(2), Row(2), ControlWidth(3),ControlHeight(1),.ValueBox
      Button Column(5), Row(2), ControlWidth(2), ControlHeight(1),"Add Value",.AddValue
      
      
      Text Column(1), Row(3), ControlWidth(1), ControlHeight(1),"Result:"
      TextBox  Column(2), Row(3), ControlWidth(5), ControlHeight(1), .CodeText
      OkButton  Column(1), Row(4), ControlWidth(1), ControlHeight(1)
      CancelButton  Column(2), Row(4), ControlWidth(1), ControlHeight(1)
   End Dialog
   Dim dlg as CodeBuilder
On Error Resume Next
   iButton = Dialog(dlg)
   If iButton = -1 Then
      Dim sField As String
      iPos = CS.CursorRow
      bSuccess = CS.GetFieldLineUnicode(iPos,sField)
      sNewText = ReplaceAll(dlg.CodeText,"$",Chr(223))
      If Right(sField,1) <> " " Then
         sField = sField & " "
      End If
      sField = sField & sNewText
      bSuccess = CS.SetFieldLine(iPos,sField)
   End If
End Sub

Function DialogFunc%(DlgItem$, Action%, SuppValue&)
   'Debug.Print "Action="&Action%
   'Debug.Print DlgItem$&"=""";DlgText$(DlgItem$);""""
   'Debug.Print "SuppValue="&SuppValue&
   Select Case Action%
   Case 1 ' Dialog box initialization
      DlgText "CodeText","$7"
   Case 2 ' Value changing or button pressed
        sNewProv$ = DlgText("ProvenanceCombo")
        sNewProv$ = Mid(sNewProv,InStr(1,sNewProv,"[")+1)
        sNewProv$ = ReplaceAll(sNewProv,"]","")
        If DlgItem$ = "NewSubfield" Then
           sNewTag = "$7"
           If DlgText("CodeText") <> "" Then
               sNewTag = " "&sNewTag
           End If
           DlgText "CodeText",DlgText("CodeText")&sNewTag
           DialogFunc% = True
        ElseIf DlgItem$ = "AddProvenance" Then
           'sNewProv$ = DlgText("ProvenanceCombo")
           sCurrCode$ = DlgText("CodeText")
           If Right(sCurrCode,1) = ")" Then
               DlgText "CodeText",Left(sCurrCode$,Len(sCurrCode$)-1)&"/"&sNewProv$&")"
           ElseIf Right(sCurrCode,2) = "$7" Then
               DlgText "CodeText",sCurrCode$&" ("&sNewProv$&")"
           Else
               DlgText "CodeText",sCurrCode$&" $7 ("&sNewProv$&")"
           End If
           sCurrProv = sNewProv
           DialogFunc% = True
        ElseIf DlgItem$ = "AddValue" Then
           'sNewProv$ = DlgText("ProvenanceCombo")
           sNewValue$ = DlgText("ValueBox")
           sCurrCode$ = DlgText("CodeText")
           If sCurrProv <> sNewProv Then
               sNewValue = " ("&sNewProv$&")"&sNewValue
               If Right(sCurrCode,2) <> "$7" Then
                  sNewValue = " $7" & sNewValue
               End If
           ElseIf Right(sCurrCode,1) <> ")" Then
               sNewValue = "-"&sNewValue
           End If
           DlgText "CodeText",sCurrCode$&sNewValue 
           DlgText "ValueBox",""
           DialogFunc% = True
        End If
   Case 3 ' TextBox or ComboBox text changed 
   Case 4 ' Focus changed
      'Debug.Print "DlgFocus=""";DlgFocus();""""
   Case 5 ' Idle
      'DialogFunc% = True 'do not exit the dialog
   Case 6 ' Function key
      'If SuppValue And &H100 Then Debug.Print "Shift-";
      'If SuppValue And &H200 Then Debug.Print "Ctrl-";
      'If SuppValue And &H400 Then Debug.Print "Alt-";
      'Debug.Print "F" & (SuppValue And &HFF)
   End Select
End Function

Function Row(iPos As Integer) As Integer
   Row = MarginSize*iPos + RowHeight*(iPos-1)
End Function

Function Column(iPos As Integer) As Integer
   Column = MarginSize*iPos + ColumnWidth*(iPos-1)
End Function

Function ControlWidth(iPos As Integer) As Integer
   ControlWidth = CInt((MarginSize*(iPos-1) + ColumnWidth*iPos)*1)
End Function

Function ControlHeight(iPos As Integer) As Integer
   ControlHeight = CInt((MarginSize*(iPos-1) + RowHeight*iPos)*0.8)
End Function

Sub GetProvenanceList(ByRef aProvenanceTable$(), ByRef aProvenance$())
   ReDim aProvenance$(UBound(aProvenanceTable$,1))
   For i = 0 to UBound(aProvenance$)
      aProvenance(i) = aProvenanceTable(i,1) & " [" & aProvenanceTable(i,0) & "]"
   Next i
End Sub

Sub PopulateProvenanceTable(ByRef aProvenanceTable$())
   ReDim aProvenanceTable$(11,2)
   aProvenanceTable(0,0) = "dpeaa"
   aProvenanceTable(0,1) = "author agent" 
   aProvenanceTable(1,0) = "dpecou" 
   aProvenanceTable(1,1) = "context of use" 
   aProvenanceTable(2,0) = "dpeloe" 
   aProvenanceTable(2,1) = "language of expression" 
   aProvenanceTable(3,0) = "dpenmw" 
   aProvenanceTable(3,1) = "note on metadata work" 
   aProvenanceTable(4,0) = "dpermw" 
   aProvenanceTable(4,1) = "related manifestation of work" 
   aProvenanceTable(5,0) = "dpetow" 
   aProvenanceTable(5,1) = "related timespan of work"
   aProvenanceTable(6,0) = "dpes"
   aProvenanceTable(6,1) = "script"
   aProvenanceTable(7,0) = "dpesc"  
   aProvenanceTable(7,1) = "source consulted" 
   aProvenanceTable(8,0) = "dpets"  
   aProvenanceTable(8,1) = "element transcription standard"  
   aProvenanceTable(9,0) = "dpelst"
   aProvenanceTable(9,1) = "language, script, and transliteration"
   aProvenanceTable(10,0) = "dpsfa"
   aProvenanceTable(10,1) = "relates to subfield $a"
   aProvenanceTable(11,0) = "dpebcp"
   aProvenanceTable(11,1) = "BCP 47 code"
End Sub

Function ReplaceAll(sStr As String, sFind As String, sReplace As String) As String
   place = 1
   If InStr(place, sStr, sFind) Then
      Do While InStr(place, sStr, sFind)
          place = InStr(place, sStr, sFind)
          sStr = Left(sStr, place - 1) & sReplace & Mid(sStr, place + Len(sFind))
          place = place + Len(sReplace)
      Loop
   End If
   ReplaceAll = sStr
End Function
